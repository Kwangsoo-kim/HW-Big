-- [VII] DDL , DML , DCL
-- SQL = DDL(테이블생성, 삭제, 구조변경,테이블 데이터 제거)+DML(SELECT, INSERT, UPDATE, DELETE)
--         +DCL(사용자계정생성, 사용자에게 권한부여, 권한박탈, 트렌젝션명령어)

-- (1) DDL
-- 1. 테이블 생성 (CREATE TABLE)
CREATE TABLE BOOK(
        BOOKID NUMBER(4),
        BOOKNAME VARCHAR2(20),
        PUBLISHER VARCHAR2(20),
        RDATE DATE,
        PRICE NUMBER(8),
        PRIMARY KEY(BOOKID)             -- 테이블 내 주키(PRIMARY KEY) = 유일,NULL값 못넣음.
);
DROP TABLE BOOK;        -- BOOK 테이블 삭제

CREATE TABLE BOOK(
        BOOKID NUMBER(4) PRIMARY KEY,
        BOOKNAME VARCHAR2(20),
        PUBLISHER VARCHAR2(20),
        RDATE DATE,
        PRICE NUMBER(8)
);
SELECT * FROM BOOK;

-- EMP 와 유사한 EMP01 : EMPNO(NUMBER4), ENAME(VARCHAR2-20) , SAL(NUMBER7,2)
CREATE TABLE EMP01(
        EMPNO NUMBER(4),
        ENAME VARCHAR2(20),
        SAL NUMBER(7,2)
);
SELECT * FROM EMP01;
DESC EMP01;
-- DEPT01 : DEPTNO(숫자 2), DNAME(문자 14), LOC(문자 13)
CREATE TABLE DEPT01(
        DEPTNO NUMBER(2),
        DNAME VARCHAR2(14),
        LOC VARCHAR2(13)
);
DESC DEPT01;
-- 서브쿼리를 이용한 테이블 생성
CREATE TABLE EMP02
        AS
        SELECT * FROM EMP;      -- 서브쿼리 결과만 EMP02(제약조건은 미포함).
SELECT * FROM EMP02;
INSERT INTO EMP02 (EMPNO,ENAME,DEPTNO) VALUES(7369,'HING',90);
-- EMP03 : EMP테이블에서 EMPNO, ENAME ,DEPTNO 만 추출
CREATE TABLE EMP03
        AS
        SELECT EMPNO,ENAME,DEPTNO FROM EMP;
SELECT *  FROM EMP03;
-- EMP04 : EMP테이블에서 10번 부서만 추출
CREATE TABLE EMP04
        AS
        SELECT * FROM EMP WHERE DEPTNO=10;
SELECT * FROM EMP04;
-- EMP05 : EMP테이블의 구조만 추출
CREATE TABLE EMP05
        AS
        SELECT * FROM EMP WHERE 1=0;    -- 조건에 거짓을 걸어서 데이터빼고 테이블 구조만 가져온다.
SELECT * FROM EMP05;


-- 2. 테이블 구조 변경 (ALTER TABLE)
-- ALTER TABLE 테이블 명
-- ADD || MODIFY || DROP ~

-- (1) 필드 추가 (ADD)
SELECT * FROM EMP03;
ALTER TABLE EMP03
        ADD (JOB VARCHAR2(10), SAL NUMBER(7,2));
SELECT * FROM EMP03;
ALTER TABLE EMP03
        ADD (MGR NUMBER(4));
SELECT * FROM EMP03;

-- (2) 필드 타입 수정 (MODIFY)
ALTER TABLE EMP03
        MODIFY (EMPNO VARCHAR2(5));              -- 숫자데이터가 들어있는 상태라 변경불가
ALTER TABLE EMP03
        MODIFY (JOB VARCHAR2(5));               -- NULL데이터 뿐이라면 아무렇게나 변경가능
ALTER TABLE EMP03
        MODIFY (ENAME VARCHAR2(200));           -- 저장할 데이터량을 기존에 비해 크게 설정하는 것은 가능하나, 이미 저장된 데이터 보다 작게 설정은 불가능
ALTER TABLE EMP03
        MODIFY (ENAME VARCHAR2(5));             -- 6BYTE 자료가 있어서 불가능하다.

-- (3) 필드 삭제 (DROP)
SELECT *FROM EMP;
ALTER TABLE EMP03
        DROP COLUMN JOB;
SELECT * FROM EMP03;
ALTER TABLE EMP03
        DROP COLUMN DEPTNO;             -- 데이터 복구 불가
SELECT * FROM EMP03;
-- 논리적으로 특정 필드를 접근 못도하록 (낮)
ALTER TABLE EMP03
        SET UNUSED(SAL);
SELECT * FROM EMP03;
-- 논리적으로 접근 불가했던 필드를 삭제(새벽)
ALTER TABLE EMP03
        DROP UNUSED COLUMNS;
SELECT * FROM EMP03;    -- 물리적 삭제시 테이블 엑세스 불가능


-- 3. 테이블 삭제(DROP TABLE)
DROP TABLE EMP01;
DROP TABLE DEPT;                -- 다른 테이블에서 참조하는 데이터가 있을땐 바로 삭제 불가능


-- 4. 테이블 내에 데이터 싹 다 제거(TRUNCATE TABLE)                 **DDL이라 복구불가능
SELECT * FROM EMP02;
TRUNCATE TABLE EMP02;

-- 5. 테이블 이름 변경(RENAME)
SELECT * FROM EMP03;
RENAME EMP03 TO EMP3;
SELECT * FROM EMP3;

-- 6. 데이터 딕셔너리(접근불가) -> 데이터 딕셔너리 뷰(사용자 접근용)
        -- DBA_TABLES, DBA_INDEXES, DBA_CONSTRAINTS, DBA_VIEWS;
        -- USER_TABLES, USER_INDEXES, USER_CONSTRAINTS, USER_VIEWS;
        -- ALL_TABLES, ALL_INDEXES, ALL_CONSTRAINTS, ALL_VIEWS;

-- USER_XXX  ; SCOTT이 소유한 객체정보(테이블,인덱스,...)정보 조회
SHOW USER;
SELECT * FROM USER_TABLES;
SELECT TABLE_NAME FROM USER_TABLES;
SELECT * FROM USER_INDEXES;             -- PRIMARY KEY 나열
SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_VIEWS;               -- 만드게 없어서 볼게없다.
DROP TABLE BOOK;
CREATE TABLE BOOK(
        BOOKID NUMBER(4) CONSTRAINT BP PRIMARY KEY,
        BOOKNAME VARCHAR2(100),
        PUBLISHER VARCHAR2(100),
        RDATE DATE,
        PRICE NUMBER(8)
);

--DBA_XXX ; DBA 권한을 가진 사용자만 접근가능한 객체 정보
SELECT TABLE_NAME, OWNER FROM DBA_TABLES;
SELECT * FROM DBA_INDEXES;
SELECT * FROM DBA_CONSTRAINTS;
SELECT * FROM DBA_VIEWS;

--ALL_XXX ; SCOTT이 소유한 객체나 접근권한이 부여된 객체 정보
SELECT * FROM ALL_TABLES;
SELECT * FROM ALL_CONSTRAINTS;
SELECT * FROM ALL_INDEXES;
SELECT * FROM ALL_VIEWS;



-- DML
-- 7. DML ; SELECT , INSERT , UPDATE , DELETE
-- (1) INSERT INTO 테이블 이름 (필드명1.필드명2,...) VALUES (값1,값2,...);           -- 명시된 필드에 값이 들어감
--      INSERT INTO 테이블 이름 VALUES (값1,값2,...);          -- 테이블 만들때 입력한 필드 순으로 값이 채워짐
SELECT * FROM DEPT01;
INSERT INTO DEPT01 (DEPTNO, DNAME ,LOC) VALUES (10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT01 (DNAME, LOC, DEPTNO) VALUES ('SALES','BOSTON',20);
INSERT INTO DEPT01 (DEPTNO, DNAME ,LOC) VALUES (30,'IT',NULL);
INSERT INTO DEPT01 (DEPTNO ,DNAME ) VALUES (40,'OPERATION');                -- LOC에 NULL
SELECT * FROM DEPT01;
-- INSERT 문에서 필드명 생략시 반드시 전체 필드 값을 다 입력해 주어야한다.
INSERT INTO DEPT01 VALUES (50,'물류','마포');
SELECT * FROM DEPT01;
DESC DEPT01;    -- PK없는 상태, 중복데이터 삽입 가능.
-- DEPT01 테이블에 DEPT테이블 10~30부서까지 내용을 INSERT
INSERT INTO DEPT01  SELECT * FROM DEPT WHERE DEPTNO<40;
SELECT * FROM DEPT01
        ORDER BY DEPTNO;
-- BOOK 테이블에 책번호 11, 스포츠의학, 한솔출판,출판일 오늘 , 가격은 90000
SELECT * FROM BOOK;
INSERT INTO BOOK VALUES (11,'스포츠의학','한솔출판',SYSDATE,90000);
COMMIT;         -- DML 명령어는 트랜잭션 단위로 진행. 현 트렌잭션에 작업을 반영
ROLLBACK;       -- 트렌잭션 안에 있는 DML 명령어를 취소


-- 연습문제
DROP TABLE SAM01;

CREATE TABLE SAM01(
        EMPNO NUMBER(4) CONSTRAINT C_SAM PRIMARY KEY,
        ENAME VARCHAR2(10),
        JOB VARCHAR2(9),
        SAL NUMBER(7,2)
);

INSERT INTO SAM01 VALUES (1000,'APPLE','POLICE',10000);
INSERT INTO SAM01 VALUES (1010,'BANANA','NURSE',15000);
INSERT INTO SAM01 VALUES (1020,'ORANGE','DOCTOR',25000);
INSERT INTO SAM01 VALUES (1030,'VERY',NULL,25000);
INSERT INTO SAM01 VALUES (1040,'CAT',NULL,2000);
INSERT INTO SAM01 SELECT EMPNO,ENAME,JOB,SAL FROM EMP WHERE DEPTNO=10;
        
SELECT * FROM SAM01;

-- (2) UPDATE 테이블이름 SET 필드1=값1,필드2=값2,... [WHERE 조건];
CREATE TABLE EMP01
        AS SELECT * FROM EMP;
SELECT * FROM EMP01;
-- 부서번호를 30으로 수정
UPDATE EMP01 SET DEPTNO=30;
-- 모든 직원의 급여를 10%인상하시오
UPDATE EMP01 SET SAL = SAL*1.1;
COMMIT;
-- 특정 행의 데이터만 수정하고자 할때  WHERE 절 추가
-- 10번 부서 직원의 입사일을 오늘로 수정하고, 부서번호는 30번 부서로 수정
DROP TABLE EMP01;
UPDATE EMP01 SET HIREDATE=SYSDATE,DEPTNO=30 WHERE DEPTNO=10;
SELECT * FROM EMP01;
-- SAL이 3000이사인 사원만 급여를 10%인상하시오
UPDATE EMP01 SET SAL=SAL*1.1 WHERE SAL>=3000;
-- DALLAS에 근무하는 직원들의 연봉을 1000인상
UPDATE EMP01 SET SAL=SAL+1000
        WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS');
-- SCOTT 사원의 부서번호는 20으로 JOB은 MANAGER로 수정하는 SQL
UPDATE EMP01 SET DEPTNO=20,JOB='MANAGER' WHERE ENAME = 'SCOTT';
SELECT * FROM EMP01;
-- SCOTT 사원의 입사일을 오늘로, 급여는 50, 상여금은 400으로 수정
UPDATE EMP01 SET HIREDATE =SYSDATE , SAL =50, COMM=400 WHERE ENAME = 'SCOTT';
-- 서브쿼리를 이용한 UPDATE 문
-- DEPT01에서 20번 부서의 지역명을 40번 부서의 지역명으로 
SELECT * FROM DEPT01;
UPDATE DEPT01 SET LOC = '종로' WHERE DEPTNO =40;
UPDATE DEPT01 SET LOC = (SELECT LOC FROM DEPT01 WHERE DEPTNO =40) WHERE DEPTNO=20;
--DEPT01에서 20부서의 지역명을 40번 부서의 부서명, 지역명으로 변경
UPDATE DEPT01 SET DNAME=(SELECT DNAME FROM DEPT01 WHERE DEPTNO=40) WHERE DEPTNO=20;
UPDATE DEPT01 SET LOC = (SELECT LOC FROM DEPT01 WHERE DEPTNO =40) WHERE DEPTNO=20;
UPDATE DEPT01 SET (DNAME,LOC) = (SELECT DNAME,LOC FROM DEPT01 WHERE DEPTNO =40) WHERE DEPTNO=20;
--EMP01 테이블의 모든 사원의 급여와 입사일을 'KING'의 급여와 입사일로 수정
UPDATE EMP01 SET (SAL,HIREDATE) = (SELECT SAL,HIREDATE FROM EMP01 WHERE ENAME='KING');
SELECT * FROM EMP01;

-- (3) DELETE  ; 테이블 내 데이터 삭제
-- DELETE FROM 테이블명 [WHERE 조건];
COMMIT;
SELECT * FROM EMP01;
DELETE FROM EMP01;
ROLLBACK;               -- DELETE는 COMMIT 전에 ROLLBACK 가능
-- EMP01 테이블에서 30번 부서 직원만 삭제
DELETE FROM EMP01 WHERE DEPTNO = 30;
-- SAM01 테이블에서 JOB이 정해지지 않는 사원을 삭제
SELECT * FROM SAM01;
DELETE FROM SAM01 WHERE JOB IS NULL;
-- EMP01 테이블에서 부서명이 SALES인 사원을 삭제 
DELETE FROM EMP01 WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
-- EMP01 테이블에서 부서명이 RESEARCH인 사원을 삭제
DELETE FROM EMP01 WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='RESEARCH');





-- 연습문제 
CREATE TABLE MY_DATA(
        ID NUMBER(4) PRIMARY KEY,
        NAME VARCHAR2(10),
        USERID VARCHAR2(30),
        SALARY NUMBER(10,2)
);
INSERT INTO MY_DATA  VALUES (1,'SCOTT','SSCOTT',10000);
INSERT INTO MY_DATA  VALUES (2,'FORD','FFORD',13000);
INSERT INTO MY_DATA  VALUES (3,'PATEL','PPATEL',33000);
INSERT INTO MY_DATA  VALUES (4,'REPORT','RREPORT',23500);
INSERT INTO MY_DATA  VALUES (5,'GOOD','GGOOD',44450);

SELECT * FROM MY_DATA;
COMMIT;
UPDATE MY_DATA SET SALARY=65000 WHERE ID=3;
COMMIT;
DELETE FROM MY_DATA WHERE NAME = 'FORD';
COMMIT;
UPDATE MY_DATA SET SALARY=15000 WHERE SALARY<=15000;
DROP TABLE MY_DATA;


-- ERD : 구조화된 데이터를 저장하기 위해 DB를 사용하는데, DB의 구조와 제약조건등 다양한 기법을 설계하는 툴
-- 제약조건은 부적합한 데이터 삽입 방지 수단
CREATE TABLE DEPT1(
        DEPTNO NUMBER(2) PRIMARY KEY,
        DNAME VARCHAR2(14),
        LOC VARCHAR2(13)
);
CREATE TABLE EMP1(
        EMPNO NUMBER(4) PRIMARY KEY,
        ENAME VARCHAR2(10) UNIQUE,
        JOB VARCHAR2(9) NOT NULL,
        MGR NUMBER(4),
        HIREDATE DATE DEFAULT SYSDATE,
        SAL NUMBER(7,2) CHECK (SAL>0),
        COMM NUMBER(7,2),
        DEPTNO NUMBER(2) REFERENCES DEPT1(DEPTNO)
);
-- DEPT1 입력
INSERT INTO DEPT1 VALUES(10,'회계','신촌');
INSERT INTO DEPT1 VALUES(20,'설계','마포');
INSERT INTO DEPT1 VALUES(30,'영업','이대');
INSERT INTO DEPT1 VALUES(40,'전산','공덕');
-- EMP1 입력
INSERT INTO EMP1 (EMPNO, ENAME, JOB ,MGR, SAL,DEPTNO)
        VALUES (1111,'홍가','회장',NULL,9000,40);
INSERT INTO EMP1 (EMPNO,ENAME,JOB,MGR,SAL,DEPTNO)
        VALUES (1112,'홍군','전무',1111,1000,30);
INSERT INTO EMP1 VALUES (1113,'김군','몰라',1112,TO_DATE('20201230','YYYYMMDD'),8000,2000,40);
COMMIT;


-- EX, 학생관리

DROP TABLE STUDENT;
DROP TABLE MAJOR;


CREATE TABLE MAJOR(
        major_CODE NUMBER(3) PRIMARY KEY,
        major_NAME VARCHAR2(100) NOT NULL,
        major_OFFICE_LOC VARCHAR2(200)
);
CREATE TABLE STUDENT(
        student_CODE VARCHAR2(10) PRIMARY KEY,
        student_NAME VARCHAR2(30) NOT NULL,
        student_SCORE NUMBER(3),
        major_CODE REFERENCES MAJOR(major_CODE)
);                           
-- MYSQL 에서는  FOREIGN KEY(major_CODE) REFERENCES MAJOR(MAJOR_CODE 로 입력해야함.

INSERT INTO MAJOR VALUES (1,'경영정보','3층 인문실');
INSERT INTO MAJOR VALUES (2,'소프트웨어공학','3층 인문실');
INSERT INTO MAJOR VALUES (3,'디자인','4층 과학실');
INSERT INTO MAJOR VALUES (4,'경제','4층 과학실');
INSERT INTO STUDENT VALUES ('A01','김길동',100,1);
INSERT INTO STUDENT VALUES ('A02','문길동',90,2);
INSERT INTO STUDENT VALUES ('A03','홍길동',95,1);
SELECT * FROM MAJOR;
SELECT * FROM STUDENT;


-- EX 도서관리
DROP TABLE BOOK;                                        
DROP TABLE BOOKCATEGORY;

CREATE TABLE BOOKCATEGORY(
        BC_CATEGORY_CODE NUMBER(4) PRIMARY KEY,
        BC_CATEGORY_NAME VARCHAR2(50) NOT NULL UNIQUE,
        BC_OFFICE_LOC VARCHAR2(100) NOT NULL
);
CREATE TABLE BOOK(
        BOOK_NO VARCHAR2(10) PRIMARY KEY,
        BOOK_NAME VARCHAR2(100) NOT NULL,
        PUBLISHER VARCHAR2(80) NOT NULL,
        PUB_YEAR NUMBER(4) DEFAULT TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')),
        BC_CATEGORY_CODE REFERENCES BOOKCATEGORY(BC_CATEGORY_CODE)
);

INSERT INTO BOOKCATEGORY VALUES(100,'철학','3층 인문실');
INSERT INTO BOOKCATEGORY VALUES(200,'인문','3층 인문실');
INSERT INTO BOOKCATEGORY VALUES(300,'자연과학','4층 과학실');
INSERT INTO BOOKCATEGORY VALUES(400,'IT','4층 과학실');
INSERT INTO BOOK VALUES('100A01','철학자의 삶','더존출판',2017,100);
INSERT INTO BOOK VALUES('400A01','이것이 DB다','더존출판',2018,400);
INSERT INTO BOOK (BOOK_NO,BOOK_NAME,PUBLISHER,BC_CATEGORY_CODE) VALUES('300A01','자연과학이란','문학사',300);
SELECT * FROM BOOK;
SELECT * FROM BOOKCATEGORY;



-- DCL
-- 계정 추가
CREATE USER kim IDENTIFIED BY tiger;            -- kim 계정 비밀번호 tiger
-- 권한 부여
GRANT CREATE SESSION, CREATE TABLE TO kim;               -- session 로그인 하는 기능 
GRANT SELECT ON EMP TO kim;              --  emp 접속 권한


SHOW USER;
-- 권한 박탈
REVOKE SELECT ON EMP FROM kim;          -- 권한 박탈 
DROP USER kim CASCADE;          -- 계정 삭제