# 가장 큰 값의 요일 출력
week.count
# 가장 큰 값의 요일 출력
tapply(week.count$week.korname,week.count$count,max)
# 가장 큰 값의 요일 출력
apply(week.count$week.korname,week.count$count,max)
# 가장 큰 값의 요일 출력
;apply(week.count$week.korname,week.count$count,max)
# 가장 큰 값의 요일 출력
lapply(week.count$week.korname,week.count$count,max)
# 가장 큰 값의 요일 출력
tapply(week.count$week.korname,week.count$count,max)
# 가장 큰 값의 요일 출력
by(week.count$week.korname,week.count$count,max)
# 가장 큰 값의 요일 출력
week.count[which.max(week.count$count)]
which.max(week.count$count)
# 가장 큰 값의 요일 출력
week.count[which.max(week.count$count),]
# 가장 큰 값의 요일 출력
week.count[which.max(week.count$count),1]
# 값이 가장 작은 값의 요일 출력
week.count[which.min(week.count$count),1]
week.count[which(week.count$count>50),]
week.count[which(week.count$count>50),1]
#m1
m1 <-c(1,2,3)
#m1
n1 <-c(1,2,3)
n2 <-c(4,5,6)
n3 <-c(7,8,9)
m1 <- matrix(n1,n2,n3,nrow=3)
m1
#m1
n1 <-c(1,2,3)
n2 <-c(4,5,6)
n3 <-c(7,8,9)
m1 <- matrix(n1,n2,n3,nrow=3)
m1
#m1
n1 <-c(1,2,3)
n2 <-c(4,5,6)
n3 <-c(7,8,9)
m1 <- matrix(n1,n2,n3,nrow=3,ncol=3)
m1 <- matrix(n1,n2,n3,nrow=3)
m1
m1 <- matrix(c(n1,n2,n3),nrow=3)
m1
#m2
n1<-1:9
m2<- matrix(n1,nrow=3,byrow=T)
m2
# 문제 8
m3<-dimnames(m2)<- list(c('row1','row2','row3'),c('col1','col2','col3'))
m3
# 문제 8
m2<-dimnames(m2)<- list(c('row1','row2','row3'),c('col1','col2','col3'))
m2
m2
m2<- matrix(n1,nrow=3,byrow=T)
#m2
n1<-1:9
m2<- matrix(n1,nrow=3,byrow=T)
m2
# 문제 8
m2<-dimnames(m2)<- list(c('row1','row2','row3'),c('col1','col2','col3'))
m2
#m2
n1<-1:9
m2<- matrix(n1,nrow=3,byrow=T)
m2
# 문제 8
m2<-dimnames=list(c('row1','row2','row3'),c('col1','col2','col3'))
# 문제 8
dimnames(m2)<-list(c('row1','row2','row3'),c('col1','col2','col3'))
m2
m3<-m2
m3
# 문제9
alpha <- matrix(c('a,c,e'),c('b,d,f'),nrow=2)
# 문제9
alpha <- matrix(c('a,c,e'),c('b,d,f'))
# 문제9
alpha <- matrix(c('a,c,e'),c('b,d,f'),nrow=2,ncol=3)
# 문제9
alpha <- matrix(c('a,c,e'),c('b,d,f'),nrow=2,ncol=3,byrow=T)
# 문제9
alpha <- matrix(c('a,c,e'),c('b,d,f'),nrow=2,ncol=3,byrow=F)
# 문제9
x<- c('a','c','e')
y<- c('b','d','f')
alpha <- matrix(x,y,nrow=2)
alpha <- matrix(c(c('a','c','e'),c('b','d','f')),nrow=2)
alpha
# 문제9
alpha <- matrix(c(c('a','c','e'),c('b','d','f')),nrow=2,byrow=T)
alpha
alpha2 <- rbind(alpha,c('x','y','z'))
alpha2
alpha3 < cbind(alpha,c('s','p'))
alpha3 <- cbind(alpha,c('s','p'))
alpha3
a <- array(1:24,dim=c(2,3,4))
a
# (1)
a[2,3,4]
# (2)
a[2,,]
# (3)
a[,1,]
# (4)
a[,,3]
# (5)
(a+100)
# (6)
(a[,,4])*4
# (6)
((a[,,4])*4)
# (7)
a[1,c(2,3),]
# (8)
a[2,,2]+100
# (8)
a<-a[2,,2]+100
a
#a
a <- array(1:24,dim=c(2,3,4))
# (8)
a<-append(a[2,,2]+100)
#a
a <- array(1:24,dim=c(2,3,4))
# (8)
attr(a,a[2,,2])<-a[2,,2]+100
#a
a <- array(1:24,dim=c(2,3,4))
# (8)
attr(a[2,,2],a[2,,2]+100)
# (8)
attr(a,a[2,,2])<-c(108,110,112)
# (8)
a<-attr(a,a[2,,2])<-c(108,110,112)
# (8)
a[2,,2]<-a[2,,2]+100
a
# (9)
a[,,1]<- a[,,1]-2
a
# (10)
a<-a*10
a
# (11)
a<- NULL
a
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),colnames(c(x,y)))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),colnames(x,y))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),colnames('x','y'))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),colnames(c('x','y')))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),colnames=(c('x','y')))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),colnames=('x','y'))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),colnames=('x','y'))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),names('x','y'))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),names=c('x','y'))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),)
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10))
df1
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),row.names = x,y)
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),row.names = 'x','y')
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),row.names = 'x')
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),row.names = c('x','y')
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),row.names = c('x','y'))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),colnames(c('x','y')))
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10),)
#df1
df1 <- data.frame(c(1,2,3,4,5),c(2,4,6,8,10))
names(df1)<- list(c('x','y'))
df1
names(df1)<- list('x','y')
df1
#df2
df2<- data.frame(c(1,2,3,4,5),c(a,b,c,d,e),c(6,7,8,9,10))
#df2
df2<- data.frame(c(1,2,3,4,5),c('a','b','c','d','e'),c(6,7,8,9,10))
df2
names(df2)<-list('col1','col2','col3')
df2
#df3
a<- c('사과','딸기','수박')
b<- c(1800,1500,3000)
c<- c(24,38,13)
df3<- data.frame(a,b,c)
dr3
dr3
df
df3
names(df3)<- list('제품명','가격','판매량량')
df3
names(df3)<- list('제품명','가격','판매량')
#df3
a<- c('사과','딸기','수박')
b<- c(1800,1500,3000)
c<- c(24,38,13)
df3<- data.frame(a,b,c)
names(df3)<- list('제품명','가격','판매량')
df3
# 문제 14
summaryBy(df3$가격~df3$판매량,data=df3,mean)
# 문제 14
summaryBy(df3$가격~df3$판매량,data=df3,FUN=mean)
# 문제 14
summaryBy(df3$가격~df3$판매량,data=df3$제품명,FUN=mean)
# 문제 14
aggregate(df3$가격,by=list(df3$제품명),mean)
# 문제 14
by(df3[,2:3],df3$제품명,mean)
# 문제 14
by(df3[,2:3],df3,mean)
# 문제 14
by(df3[1,2:3],df3$제품명,mean)
# 3.2 by : 그룹화 처리를 위한 apply (함수를 2개 이상 사용 가능)
by(iris[,1:2],iris[,5],min)
by(iris[,1:4],iris$Species,summary)
# cust의 직업별 평균을 income과 income2를 한꺼번에
by(cust[,2:3],cust$job,summary)
# 문제 14
summaryBy(df3[1,2:3],df3$제품명,mean)
# 문제 14
summaryBy(df3[,2:3],df3$제품명,mean)
# 문제 14
summaryBy(df3[,2:3],df3$제품명,FUN=mean)
# 문제 14
df3[,2:3]
# 문제 14
apply(df3[,2:3],1,mean)
# 문제 14
apply(df3[,2:3],2,mean)
# 문제 15
name <- c('Potter', 'Elsa', 'Gates', 'Wendy', 'Ben')
gender <- factor(c('M', 'F', 'M', 'F', 'M'))
math <- c(85, 76, 99, 88, 40)
#df4
df4<- data.frame(name,gender,math)
df4
str(df4)
#(a)
stat<-(76,73,95,82,35)
#(a)
stat<-c(76,73,95,82,35)
df4<- cbind(df4,stat)
df4
srt(dft)
srt(df4)
str(df4)
# (b)
score <- math+stat
score
df4<- cbind(df4,score)
df4
# (c)
grade <-function(score){
if(score>=150){
return('A')
}else if(score>=100 & score<150){
return('B')
}else if(score>=70 & score<100){
return('C')
}
}
grade
grade(score)
df4<- cbind(df4,grade(score))
grade(149)
# 문제 16
L1 <- list(c('scott'),c(3000))
L1
names(L1)<- list('name','sal')
L1
L1(2,1)
L1[2,1]
L1[2]
L1[[2]]
L1[[2]]*2
result1<-L1[[2]]*2
# 문제 17
L2 <-list(c('scott'),c(100,200,300))
L2
# 문제 18
L3 <- list(c(3,5,7), c('A', 'B', 'C'))
L3
L3<- L3[2,2]
L3<- L3[2]
# 문제 18
L3 <- list(c(3,5,7), c('A', 'B', 'C'))
L3[[2],2]
L3[2,2]
L3[2,[2]]
L3[2
L3[2]
L3[2]
L3[[2]]
L3[[2]][1]
L3[[2]][1]<- 'alpha'
L3
# 문제 19
L4 <- list(alpha=0:4, beta=sqrt(1:5), gamma=log(1:5))
L4
L4['alpha']
L4['alpha']+10
L4[['alpha']]
L4[['alpha']]+10
L4[['alpha']]<-L4[['alpha']]+10
L4
# 문제 19
L4 <- list(alpha=0:4, beta=sqrt(1:5), gamma=log(1:5))
L4
L4[['alpha']]<-L4[['alpha']]+10
L4
L5<-list(math=list(95, 90), writing=list(90, 85), reading=list(85, 80))
L5
unlist(L5)
score<-unlist(L5)
score
mean(score)
# 문제 21
#타입
class(iris)
#구조
str(iris)
#차원
dim(iris)
#변수이름
dimnames(iris)
#변수이름
dimnames(iris)
#변수이름
names(iris)
#기본통계량
summary(iris)
#기본통계량
summary(iris[,-5])
sd(iris[,-5])
apply(iris[,-5],2,sd)
#기본통계량
apply(iris[,-5],2,mean)
apply(iris[,-5],2,sd)
apply(iris[,-5],2,quantile)
#기본통계량
summaryBy(iris[,-5],iris$Species,FUNc(mean,sd,quantile)
#기본통계량
summaryBy(iris[,-5],iris$Species,FUNc(mean,sd,quantile))
#기본통계량
summaryBy(iris[,-5],iris$Species,FUNc(mean,sd,quantile))
#기본통계량
summaryBy(iris[,-5],by=list(iris$Species),FUN=c(mean,sd,quantile))
#기본통계량
summaryBy(iris[,-5],iris,FUN=c(mean,sd,quantile))
#기본통계량
summaryBy(Sepal.Length+Sepal.Width+Petal.Length+Petal.Width~Species,iris,FUN=c(mean,sd,quantile))
orderBy(~Petal.Length,data=iris)
orderBy(~Petal.Length,data=iris,decreasing=T)
orderBy(~-Petal.Length,data=iris)
orderBy(~-Sepal.Width,data=iris)
table(iris$Species)
tapply(Sepal.Length,Species,sum)
apply(iris$Sepal.Length,2,mean)
apply(iris$Sepal.Length,1,mean)
apply(iris[,-5],1,mean)
apply(iris[,-5],2,mean)
#lapply
lapply(iris,mean)
#lapply
lapply(iris[,-5],mean)
#sapply
sapply(iris[,-5],mean)
#종별 sepal.length평균
tapply(iris$Sepal.Length,iris$Species,mean)
# 문제 26
which.max(iris$Sepal.Length)
# 문제 26
iris$Species[,which.max(iris$Sepal.Length)]
# 문제 26
iris$Species[which.max(iris$Sepal.Length)]
# 문제 26
iris$Species[which.max(iris$Sepal.Length),]
# 문제 26
iris$Species[which.max(iris$Sepal.Length)]
df4
name <- c('Potter', 'Elsa', 'Gates', 'Wendy', 'Ben')
gender <- factor(c('M', 'F', 'M', 'F', 'M'))
math <- c(85, 76, 99, 88, 40)
#df4
df4<- data.frame(name,gender,math)
df4
df4$stat<-c(76,73,95,82,35)
df4
# (b)
df4$score<- df4$math+df4$stat
df4
# (c)
df4$grade <-ifelse(score>=150 , 'A', ifelse(score<150 & score>=100 , 'B',ifelse(score>=70 & score<100 , 'C', '') ))
# (c)
df4$grade <-ifelse(score>=150 , 'A', ifelse(score<150 & score>=100 , 'B',ifelse(score>=70 & score<100 , 'C','F')))
# (c)
df4$grade <-ifelse(score>=150 , 'A', ifelse(score<150 & score>=100 , 'B','C'))
# (c)
df4$grade <-ifelse(score>=150 , 'A', ifelse(score<150 && score>=100 , 'B','C'))
# (c)
df4$grade <- ifelse(score>=150 , 'A', ifelse(score<150 && score>=100 , 'B','C'))
# (c)
df4$grade <- ifelse('score>=150' , 'A', ifelse('score<150 && score>=100' , 'B','C'))
df4
# (c)
df4$grade <- ifelse(score>=150 , 'A', ifelse(score<150 && score>=100 , 'B','C'))
df4
# (c)
df4$grade <- ifelse(score>=150 , 'A', ifelse(score>=100 , 'B','C'))
df4
df4$grade <- NULL
df4
# (c)
df4$grade <- ifelse(score>=150 , 'A', ifelse(score>=100 , 'B','C'))
df4
# (c)
df4$grade <- ifelse(df4$score>=150 , 'A', ifelse(df4$score>=100 , 'B','C'))
df4
# 문제 26
iris$Species[which.max(iris$Sepal.Length)]
# 문제 26
iris$Species[which.max(iris$Sepal.Length),]
# 문제 26
iris$Species[which.max(iris$Sepal.Length)]
# 1. 외부파일 read/write
# 1.1 엑셀파일 읽어오기 - readx1 패키지 이용
library(readlx)
# 1. 외부파일 read/write
# 1.1 엑셀파일 읽어오기 - readx1 패키지 이용
library(readxl)
install.packages('readxl')
library(readxl)
getwd()
exam <- read_excel('inData/exam.xlsx')
exam <- read_excel("inData/exam.xlsx")
exam <- read_excel("D:/kks/note/07_R/exam.xlsx")
exam <- read_excel("D:/kks/note/07_R/inData/exam.xlsx")
exam<- as.data.frame(exam)
head(exam)
nrow(exam)
exam[21,] <- data.frame(id=1,class=1,math=90,english=90,science=99)
tail(eanm)
tail(exam)
exam[21,] <- data.frame(id=21,class=1,math=90,english=90,science=99)
tail(exam)
exam$tot <- exam$math+exam$english+exam$science
table(exam$tot)
mean(exam$tot)
exam$grade <- ifelse(exam$tot>mean(exam$tot), '상','하')
apply(exanm[,3:6],2,mean)
apply(exam[,3:6],2,mean)
data <- read_excel("inData/data_ex.xls")
data
data <- read_excel("inData/data_ex.xls")
data
data <- read_excel("inData/data_ex.xls")
data
View(data)
data <- read_excel("inData/data_ex.xls")
data
data
data <- read_excel("inData/data_ex.xls")
data
data <- read_excel("inData/data_ex.xls")
data
View(data)
data
.data <- as.data.frame(data)
data
data <- as.data.frame(data)
data
data <- read_excel("inData/data_ex.xls", col_names = F)
data
data <- read_excel("inData/data_ex.xls", col_names = F)
data
data <- as.data.frame(data)
data <- read_excel("inData/data_ex.xls", col_names = F)
data
rm(data[1,])
data <- read_excel("inData/data_ex.xls", col_names = F)
data
data <- read_excel('inData/data_ex.xls',col_names = F)
data
data <- read_excel('inData/data_ex1.xls',col_names = F)
data
data <- read_excel('inData/data_ex1.xls',col_names = F)
