x<-1
# (3) break,next(자바에서 continue)
x<-1
# (3) break,next(자바에서 continue)
x<-1
while(x<10){
x<-x+1
if(x==3) break;
cat(x)
}
# (3) break,next(자바에서 continue)
x<-1
while(x<10){
if(x==3) break;
cat(x)
x<-x+1
}
# (3) break,next(자바에서 continue)
x<-1
while(x<10){
x<-x+1
if(x==3) next;
cat(x)
}
# (3) break,next(자바에서 continue)
x<-1
while(x<10){
if(x==3) next;
cat(x)
x<-x+1
}
while(x<10){
if(x==3) next
x<-x+1
cat(x)
}
# (3) break,next(자바에서 continue)
x<-1
# (3) break,next(자바에서 continue)
x<-1
while(x<10){
if(x==3) next
x<-x+1
cat(x)
}
while(x<10){
if(x==3) next
x<-x+1
cat(x)
}
while(x<10){
if(x==3) next
x<-x+1
print(x)
}
while(x<10){
if(x==3)
next
x<-x+1
print(x)
}
while(x<10){
next
x<-x+1
print(x)
if(x==3)
}
while(x<10){
x<-x+1
print(x)
if(x==3)
next
}
# 2. 연산자
# 논리연산자 &,&&,|,||
TRUE & TRUE
x<- c(T,T,F,F)
y<- c(T,F,T,F)
x & y
x && y
x|y
x||y
# 2.2 중위연산자
5+8
'+'(5,8)
'%add%' <- function(x,y){
return(x+y)
}
'%add%'(5,8)
5%add%8
c<-c(10,23,30)
10%in%c
strings <- c('hello','world','R')
strings%in%'R'
a<-c(2,3,4)
b<-c(10,20,30)
a%o%b
a<c('1','2','3')
a<-c('1','2','3')
b<-c('a','b','c)
b<-c('a','b','c')
b<-c('a','b','c')
outer(a,b,Fun=paste)
outer(a,b,FUN=paste)
matrix.a<-matrix(1:6,nrow=3)
matrix.a
matrix.b<-matrix(1:6,nrow=3)
matrix.b
matrix.a%o%matrix,b
solve(matrix.a)
# 3.함수
pow <- function(x,y){
return(x^y)
}
pow
pow(3,4)
pow(2,8)
#가변 인자 함수 total total(1) total(2,3,4)
total<- function(...){
args <- list(...)
sum <- 0
for(val in args){
sum <- sum+val
}
cat(va;,'까지 합:',sum)
}
#가변 인자 함수 total total(1) total(2,3,4)
total<- function(...){
args <- list(...)
sum <- 0
for(val in args){
sum <- sum+val
cat(val,'까지 합:',sum)
}
return(sum)
}
total()
total(1)
total(10,2,3,5)
#가변 인자 함수 total total(1) total(2,3,4)
total<- function(...){
args <- list(...)
sum <- 0
for(val in args){
sum <- sum+val
cat(val,'까지 합:',sum,'\n')
}
return(sum)
}
total(10,2,3,5)
total(1)
total(5)
fact<-function(num){
if(num<0){
return()
}else (num==1){
return(1)
}else{
return(num*fact(num-1))
}
}
fact<-function(num){
if(num<0){
return()
}else if (num==1){
return(1)
}else if{
return(num*fact(num-1))
}
}
fact<-function(num){
if(num<0){
return()
}else if (num==1){
return(1)
}else {
return(num*fact(num-1))
}
}
fact(3)
fact(4)
fact(5)
fact(0)
# 4. R환경
environment()
f<- function
f<- function(f_x){
g<-function(g_x){
print('g함수 안')
print(environment())
print(paste('g 함수 영역에서 변수들',ls()))
}
}
f <- function(f_x){
g <-function(g_x){
print('g함수 안')
print(environment())
print(paste('g 함수 영역에서 변수들',ls()))
}
g(5)
print('f함수 안')
print(environment())
print(paste('f함수 영역에서의 변수들',ls()))
}
f(10)
f(10)
f <- function(f_x){
g <-function(g_x){
print('g함수 안')
print(environment())
print(paste('g 함수 영역에서 변수들',ls()))
}
g(5)
print('f함수 안')
print(environment())
cat(paste('f함수 영역에서의 변수들',ls()))
}
f(10)
f <- function(f_x){
g <-function(g_x){
print('g함수 안')
print(environment())
print(paste('g 함수 영역에서 변수들',ls()))
}
g(5)
print('f함수 안')
print(environment())
cat('f함수 영역에서의 변수들',ls())
}
f(10)
#문
pn <- function(x){
if(x%%x=0 && x/x=1){
return(T)
}else if (x=0 || x=1){
return(F)
}else{
return(F)
}
}
#문
pn <- function(x){
if(x%%x=0 && x/x=1){
return(TRUE)
}else if (x=0 || x=1){
return(FALSE)
}else{
return(FALSE)
}
}
#문
pn <- function(x){
if(x%%x==0 && x/x==1){
return(TRUE)
}else if (x==0 || x==1){
return(FALSE)
}else{
return(FALSE)
}
}
pn(1)
pn(5)
pn(4)
pn(0)
#문
?primenumber
#문
?primenumeric
#문
pn <- function(x){
if(x=2){
return(TRUE)
}
}
#문
pn <- function(x){
if(x==2 || x==3 || x==5 || x==7){
return(TRUE)
}
}
#문
is.pn <- function(x){
flag =F
if(x==2){
return(T)
}else if(x>1){
flag=T
for(i in 2:(x-1)){
if((x%%i)==0){
flag=F
break
}
}
}
return(flag)
}
is.pn(10)
is.pn(7)
is.pn(15)
is.pn(17)
is.pn(19)
is.pn(2)
# 1.1 시스템 인코딩 조회
Sys.getlocale()
# 1.2 write.table
iris
class(iris)
class(iris)
write.table(iris,file='outData/iris.csv',sep',')
write.table(iris,file='outData/iris.csv',sep=',')
write.table(iris,file='outData/iris2.csv',row.names = F)
InsectSprays
str(InsectSprays)
write.table(InsectSprays,file='outData/insect.csv',sep=',',row.names = F)
# 1.3 read.table : 파일을 읽어 데이터프레임 형태로 저장
irisData <- read.table('outData/iris.csv',header = T,quote=F)
?quote
# 1.3 read.table : 파일을 읽어 데이터프레임 형태로 저장
irisData <- read.table('outData/iris.csv',header = T,sep=',')
head(irisData)
tail(irisData)
str(irisData)
as.factor(irisData$Species)
irisData
str(irisData)
irisData$Species<-as.factor(irisData$Species)
str(irisData)
irisData
irisData$Species<-factor(irisData$Species,levels=c("setosa","versicolor","virginica"))
irisData
str(irisData)
# 1.4 write.csv
write.csv(iris,file='outData/iris1.csv')
# 1.5 read.csv
newData<-read.csv(file='outData/iris1.csv')
newData
str(newData)
append(newData$X,NULL)
newData
newData$X <- NULL
newData
cat('riris 요약 : ','\n',irisSummary,file='outData/irisSummary.txt',append=T,Encoding='utf-8')
# 1.6 cat : 분석 결과 등을 저장할 때
irisSummary <- summary(newData)
cat('riris 요약 : ','\n',irisSummary,file='outData/irisSummary.txt',append=T,Encoding='utf-8')
irisSummary
class(irisSummary)
irisSummary[1]
irisSummary[1,]
nro(irisSummary)
nrow(irisSummary)
cat('iris 요약 :','\n','file=outData/irisSummary.txt',Encoding='utf-8')
cat(irisSummary[i,],'\n','file=outData/irisSummary.txt',append=T,Encoding='utf-8')}
for(i in 1:6){
cat(irisSummary[i,],'\n','file=outData/irisSummary.txt',append=T,Encoding='utf-8')
}
for(i in 1:6){
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=T,Encoding='utf-8')
}
cat('iris 요약 :','\n',file='outData/irisSummary.txt')
for(i in 1:6){
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=T)
}
cat('iris 요약 :','\n',file='outData/irisSummary.txt')
for(i in 1:6){
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=TRUE)
}
irisSummary
cat('iris 요약 :','\n',file='outData/irisSummary.csv')
for(i in 1:6){
cat(irisSummary[i,],'\n',file='outData/irisSummary.csv',append=TRUE)
}
# 2. apply계열 함수 적용
# 2.1 apply :
# iris 데이터의 열별평균, 행별평균
iris[1,]~iris[150,]
# 2. apply계열 함수 적용
# 2.1 apply :
# iris 데이터의 열별평균, 행별평균
iris[1:4,]
# 2. apply계열 함수 적용
# 2.1 apply :
# iris 데이터의 열별평균, 행별평균
iris[,1:4]
apply(iris[,1:4],1,mean)
apply(iris[,-5],2,mean) # 열별 평균균
# setosa,versicolor,verginica 종을 분류하고 각각의 열별 평균 구하기
iris[,iris$Species='setosa']
# setosa,versicolor,verginica 종을 분류하고 각각의 열별 평균 구하기
iris[,iris$Species=='setosa']
# setosa,versicolor,verginica 종을 분류하고 각각의 열별 평균 구하기
iris[iris$Species=='setosa']
iris
# setosa,versicolor,verginica 종을 분류하고 각각의 열별 평균 구하기
subset(iris,iris$Species=='setosa')
apply(subset(iris,iris$Species=='setosa'),2,mean)
apply(subset(iris,iris$Species=='setosa')[,-5],2,mean)
iris
apply(subset(iris,iris$Species=='versicolor')[,-5],2,mean)
apply(subset(iris,iris$Species=='virginica')[,-5],2,mean)
apply(subset(iris,iris$Species=='setosa')[,-5],2,mean)
apply(subset(iris,iris$Species=='versicolor')[,-5],2,mean)
apply(subset(iris,iris$Species=='virginica')[,-5],2,mean)
apply(iris[,-5],2,sd) #열별 표준편차
apply(iris[,-5],2,sum)#열별 합계계
apply(iris[,-5],2,count)
apply(iris[,-5],2,median) #열별 중앙값값
apply(iris[,-5],2,min) # 열별 최소값
apply(iris[,-5],2,max) # 열별 최대값
str(InsectSprays)
# InsectSprays에서 count의 표준편차
sd(InsectSprays$count)
name<-c('김','홍','박','이','윤')
kor<-c(90,50,70,60,100)
eng<-c(100,40,50,60,70)
mat<-c(90,91,50,64,80)
student <- data.frame(name,kor,eng,mat)
student
# 학생별 평균 , 과목별 평균
apply(student[5,],1,mean)
# 학생별 평균 , 과목별 평균
apply(student[2:4,],1,mean)
# 학생별 평균 , 과목별 평균
apply(student[,-1],1,mean)
# 학생별 평균 , 과목별 평균
t(student)
apply(t(student)[,-1],2,mean)
apply(t(student)[-1,],2,mean)
apply(t(student)[-1,],1,mean)
apply(t(student)[-1,],2,mean)
apply((student[-1,],2,mean)
apply((student[-1,],2,mean)
apply(student[,-1],2,mean)
apply(student[,-1],1,mean) 학생별
apply(student[,-1],1,mean) #학생별
apply(student[,-1],2,mean) #과목별
apply(t(student)[-1,],1,mean)
# 학생별 평균 , 과목별 평균
t(student)[-1,]
# 2.2 lapply : list apply (결과도 list)
x<- list(a=1:10,beta=exp(-3:3),logic=c(T,F,F,T))
x
x[1]
x[[1]]
x[[1,2]]
x[[1,],2]
x[[1],2]
x[1,2]
x[1,2]
lapply(x,mean)
lapply(x,quantile)
lapply(x,quantile,1:3/4)
# 2.3 sapply : lapply와 유사하나 결과가 행렬이나 벡터로 봔환
sapply(x,mean)
lapply(x,mean)
sapply(x,quantile)
apply(student[-1],2,quantile)
sapply(x,quantile,1:3/4)
fivenum(0:10)
i39 <- sapply(c(3:9),seq)
i39
sapply(i39, fivenum)
lapply(i39,fivenum)
# 문, iris 데이터를 lapply와 sapply를 이용하여 sepal.length~ petal.width까지의 평균을 구해라
lapply(iris[,-5],mean)
# 문, iris 데이터를 lapply와 sapply를 이용하여 sepal.length~ petal.width까지의 평균을 구해라
irisList <- as.list(iris[,1:4])
irisList
sapply(iris[,-5],mean)
apply(iris[,-5],mean)
apply(iris[,-5],2,mean)
# 2.4 vapply : sapply에 FUN의 모든 값이 특별 value타입과 호환되는지 확인 후 출력함
vapply(irisList)
# 2.4 vapply : sapply에 FUN의 모든 값이 특별 value타입과 호환되는지 확인 후 출력함
vapply(irisList,mean,numeric(1))
i39
vapply(i39,fivenum,c(numeric(1),numeric(1),numeric(1),numeric(1),numeric(1)))
citis<-c('seoul','busan','new york','tokyo')
citis
nchar(citis[1])
nchar(citis[1:4])
sapply(citis,nchar)
apply(citis,1,nchar)
apply(citis,2,nchar)
sapply(citis,nchar)
lapply(citis,nchar)
vapply(citis,nchar,numeric(1))
# mapply : apply 처럼 보이나 여러개의 인자를 함수에 전달
rep(c(1,2,3),3)
# mapply : apply 처럼 보이나 여러개의 인자를 함수에 전달
rep(c(1,2,3),each=3)
# mapply : apply 처럼 보이나 여러개의 인자를 함수에 전달
rep(c(1,2,3),each=3,times=2)
# mapply : apply 처럼 보이나 여러개의 인자를 함수에 전달
rep(c(1,2,3),each=3)
# mapply : apply 처럼 보이나 여러개의 인자를 함수에 전달
rep(c(1,2,3),3)
x<- c(1,2,3,4)
mean(x)
mapply(rep,x=1:4,times=4:1)
rep(1,4)
?mapply
# 직업별 수입
job<-c(3,3,5,2,2,3,5,3,4,4,6,3)
income<-c(4879,6509,4183,0,3894,0,3611,6454,4975,8780,0,4362)
cust<-data.frame(job,income)
cust
b<- 'lostark'
nchar(b)
length(b)
d<-'leveling'
outer(b,d,paste,sep=',')
