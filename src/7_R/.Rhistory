cat(paste('시험점수는',score))
cat(paste('시험점수는',score,sep='\n'))
cat(paste('시험점수는',score,collapse=\n))
cat(paste('시험점수는',score,collapse='\n'))
avg <- (mean(score,na.rm = TRUE))
avg
names(score) <- c('yi','kim','yun','lim','lee','park')
score
cat(paste('시험점수는',score,collapse='\n'))
cat(paste('시험점수는',score,collapse='\n'))
class(score)
is.vector(score)
is.vector(data)
is.vector(gender)
is.vector(charArr)
# 6.1 character()
charArr <- character() # charArr length가 0인 벡터
is.vector(charArr)
length(charArr)
charArr<- character(5)
charArr
charArr[1] <-'안녕';charArr[2]<-'R';charArr[3]<-'수업중'
charArr
# 6.2 numeric()
intArr<-numeric() # intArr length가 0인 벡터
class(intArr)
is.vector((intArr))
intArr[5]<-5
intArr[3]<-3
intArr[2]<-2
intArr[1]<-1
intArr
# 6.3 logical()
logicArr = logical(2) # length 2인 벡터터
logicArr
class(logicArr)
logicArr[3]<- FALSE
logicArr[1]<- TRUE
logicArr
# 6.4 seq()
>seq
# 6.4 seq()
?seq
seq(from=1,to=10)
seq(1,10,2)
a <-seq(from=1,to=10)
a <-seq(from=1,to=10,by=2)  #앞에 변수 제거가능
a<- 1:10
is.vector(a)
seq(10,-10,-2)
seq(0,1,0.1)
a<-seq(10,-10,-2)
is.vector(a)
a<-seq(0,1,0.1)
is.vector(a)
seq(1,9,by=pi)
# 6.5 rep() : 반복 객체를 만드는 함수
rep(1:4,2)
# 6.5 rep() : 반복 객체를 만드는 함수
a <-rep(1:4,2) # 1~4 까지 2번 반복
is.vector(a)
a<-rep(1:4,c(1,2,3,4))
a
a<-rep(1:4,times=2)
a
# 6.5 rep() : 반복 객체를 만드는 함수
a<-rep(1:4,each=2) # 2개씩 each
is.vector(a)
a
a<-rep(1:4,c(1,2,3,4))
a
a<-c(1,2,3)
b<-c(10,20,30)
a+b
a-b
a^b
a%%b
c(a,b) # 벡터의 결합
d <- c(a,b) # 벡터의 결합
d
a<-c(1,2,3)
b<-c('Hello','R')
c<-c(T,F)
c
(z<-c(a,b,c))
is.vector(z)
a<-append(a,c(4,5,6))
a
a<-append(a,7)
length(a)
a<-c(1,2,3,4,5,6)
b<-c(2,4,6,8,10)
b<-c(2,4,6,8,10,12)
union(a,b)
intersect(a,b)
setdiff(a,b)
setequal(a,b)
setequal(a,c(intersect(a,b),setdiff(a,b)))
intersect(a,b) # 교집합
setdiff(a,b) # 차집합
# 7. List
student<-list(name='홍길동',age=25)
student
$name
student[1]
student[2]
student[3]
studentvector <-unlist(student)
studentvector
class(studentvector)
is.vector(studentvector)
s<-c('홍길동',25)
name(s)<-c('name','age')
names(s)<-c('name','age')
s
student<-as.list(s)
student
student['name']
studnet$name
student$name
student[1]
student[[1]]
student$age
student$age <- NULL
student
NROW(student)
length(student)
# 8.행렬(Matrix)
colmatrix <- marix(1:15,nrow=5,ncol=3)
# 8.행렬(Matrix)
colmatrix <- matrix(1:15,nrow=5,ncol=3)
colmatrix
?matrix
colmatrix <- matrix(1:15,nrow=5,byrow=FALSE)
colmatrix
rowmatrix <- martix(1:15,nrow=5,ncol=3,borow=T,dimnames=list(c('R1','R2','R3','R4','R5'),c('c1','c2','c3')))
rowmatrix <- matix(1:15,nrow=5,ncol=3,borow=T,dimnames=list(c('R1','R2','R3','R4','R5'),c('c1','c2','c3')))
rowmatrix <- matrix(1:15,nrow=5,ncol=3,borow=T,dimnames=list(c('R1','R2','R3','R4','R5'),c('c1','c2','c3')))
rowmatrix <- matrix(1:15,nrow=5,ncol=3,byrow=T,dimnames=list(c('R1','R2','R3','R4','R5'),c('c1','c2','c3')))
rowmatrix
dim(rowmatrix)
nro(rowmatrix) # 행수만만
nro(rowmatrix) # 행수만
nrow(rowmatrix) # 행수만
ncol(rowmatrix)
dim(rowmatrix)<-c(3,5)
rowma
rowmatrix
rowmatrix <- matrix(1:15,nrow=5,ncol=3,byrow=T,dimnames=list(c('R1','R2','R3','R4','R5'),c('c1','c2','c3')))
rowmatrix
dimnames(rowmatrix)
rownames(rowmatrix)
colnames((rowmatrix))
dimnames(rowmatrix)
dimnames(rowmatrix)<-list(c('1월','2월','3월','4월','5월'),c('kim','lee','choi'))
rowmatrix
x<- c(2,4)
y<- c(40,60) # 점수수
y<- c(40,60) # 점수
x<- c(2,4) # 공부량
y<- c(40,60) # 점수
X<- matrix(x,rep(1,NROW(x)),nrow=2,ncol=2)
X<- matrix(c(x,rep(1,NROW(x))),nrow=2,ncol=2)
X
Y=matrix(y,ncol=1)
Y
# X%*%ab = Y
# solve(X) %*% X %*%ab = solve(X) %*%Y
ab <- solve(X)%*%Y
ab
plot(x,y)
lines(x,y)
lines(x,x*ab[1]+ab[2])
lines(x,x*ab[1]+ab[2])
lines(x,y)
lines(x,x*ab[1]+ab[2])
plot(x,y)
lines(x,y)
lines(x,x*ab[1]+ab[2])
x<- c(32,64,96,118,126,144,152.5,158)
y<- c(18,24,61.5,49,52,105,130.3,125)
Q<- matrix(c(x,rep(1,NROW(x))),ncol = 2)
W<- matrix(y,ncol=1)
Q
W
# Q%*%ab = W
# 전치행렬 곱해서 정방행렬
t(x)
# Q%*%ab = W
# 전치행렬 곱해서 정방행렬
t(Q)
G <- t(Q)%*%Q
G
solve(G)
R<- solve(G) %*% W
ab = solve(G)%*%t(Q)%*%W
ab
ab
plot(x,y)
lines(x,x*ab[1]+ab[2])
x<-c(60,5.5,1,65,5.0,0,55,6.0,1,80,6.5,0)
y<-c(66,74,78,NA)
x1<-c(60,65,55) #몸무게
X3<-c(1,0,1)#흡연유무
X3<-c(1,0,1)#흡연유무
X3<-c(1,0,1)#흡연유무
x2<-c(5.5,5.0,6.0)#키
y<-c(66,74,78)
X<-matrix(c(x1,x2,x3),ncol=3)
X3<-c(1,0,1)#흡연유무
X<-matrix(c(x1,x2,x3),ncol=3)
X<-matrix(c(x1,x2,x3),ncol=3)
X3<-c(1,0,1)  #흡연유무
X<-matrix(c(x1,x2,x3),ncol=3)
x1<-c(60,65,55) #몸무게
x2<-c(5.5,5.0,6.0)#키
X3<-c(1,0,1)  #흡연유무
y<-c(66,74,78)
X<-matrix(c(x1,x2,x3),ncol=3)
x3<-c(1,0,1)  #흡연유무
x1<-c(60,65,55) #몸무게
x2<-c(5.5,5.0,6.0)#키
x3<-c(1,0,1)  #흡연유무
y<-c(66,74,78)
X<-matrix(c(x1,x2,x3),ncol=3)
Y<-matrix(y,ncol=1)
X
Y
ab
# X %*% ab= Y
# solve(X) %*% X %*% ab = solve(X) %*% Y
# ab = solve(X) %*% Y
ab = solve(X) %*% Y
ab
# 80kg, 6.5ft, 금연 = 기대수명?
80*ab[1] + 6.5*ab[2] + 0*ab[3]
# 행렬 연산(+,*,-,/,%%,..,%*%)
a <- matrix(1:4,nrow=2,ncol=2)
a
b<-matrix(sep(10,40,10),nrow=2,ncol=2)
b<-matrix(seq(10,40,10),nrow=2,ncol=2)
b
a+b
a*b
a^b
a%%b
a%*%b
payMatrix<-matrix(c(12000,26000,18000),ncol=3)
payMatrix
workerMatrix <-matrix(c(c(5,4,9),c(7,3,2)),ncol=2)
workerMatrix
payMatrix
workerMatrix
dimnames(payMatrix) <- list(c('시급'),c('철수','영희','말자'))
payMatrix
dimnames(workerMatrix) <- list(c('철수','영희','말자'),c('1월','2월'))
workerMatrix
cost <- payMatrix %*% workerMatrix # 1x3 %*% 3x2 => 1x2
cost
dimnames(cost)<-list(c('인건비'))
cost
dimnames(cost)<-list(c('인건비'),c('1월','2월'))
cost
# 9.배열
dataArray <- array(1:24,dimc=c(3,4,2)) #3행 4열 2면 3차원 배열열
# 9.배열
dataArray <- array(1:24,dim=c(3,4,2)) #3행 4열 2면 3차원 배열
dataArray
dim(dataArray) # 차원의 크기 조회
nrow(dataa)
nrow(dataArray)
NROW(dataArray)
ncol(dataArray) # 열수 조회
NCOL(dataArray)
length(dataa)
length(dataArray
length(dataArray)
length(dataArray)
dimnames(dataArray)<- list(c('1행','2행','3행'),c('1열','2열','3열','4열'),c('1면','2면'))
dataArray
dim(dataArray)
dim(dataArray) <- c(2,6,2)
dataArray
dim(dataArray) <- c(4,6)
dataArray
attr(dataArray,'dim')<- c(6,4)
dataArray
student_id<- c('21211','21212','21213','21214')
student_name<- c('jin','eric','den','kei')
student_eng<- c(60,85,90,95)
student_kor<- c(100,95,95,80)
student_gender <- c('남','여','남','여')
student_data<- data.frame(student_id,student_name,student_kor,student_eng,student_gender)
student_data
# 데이터프레임 열 추가 및 삭제
student_data@mat<-c(100,100,99,98)
# 데이터프레임 열 추가 및 삭제
student_data$mat<-c(100,100,99,98)
student_data
class(student_gender)
student_data$student_id<-NULL
student_data
# (3) 열의 형변환
student_data$student_gender<-as.factor(student_data$student_gender)
class(student_gender)
class(student_data$student_gender)
str(student_data)
summary(student_data)
library(reshape)
library('reshape')
install.packages("reshape")
library('reshape')
library('reshape')
student <- rename(studentdata,c(Name='student_name'))
student <- rename(student_data,c(Name='student_name'))
student_data
student <- rename(student_data,c('student_name'=Name))
student <- rename(student_data,c('student_name'=Name))
student <- rename(student_data,c('student_name'='Name'))
student_data
student <- rename(student_data,c('student_name'='Name'))
student_data
student
student <- rename(student_data,c('student_gender'='gender'))
student
student <- rename(student_data,c('student_kor'='kor'))
student <- rename(student_data,c('student_eng'='eng'))
student
names(student_data)<- c('name','kor','eng','gender','mat')
student_data
student <- rename(student,c('student_kor'='kor','student_eng'='eng','student_gender'='gender'))
student
student <- rename(student_data,c('student_name'='Name'))
student
student_data
# (5) 데이터 프레임 합치기
# 행으로 합치기 rbind
newStudent<-rbind(student_data,student)
newStudent
# 열로 합치기 cbind
newStudent2<-cbind(student_data,student)
newStudent2
id=data.frame(student_id)
id
names(id)<- (id)
id
names(id)<- ('id')
id
student<-cbind(id,student)
student
# 부분 데이터 조회
student <- rbind(student,student)
student
# 부분 데이터 조회
student <- rbind(student,student)
student
student[1,1] #1행1열열
student[1,]
student[,1]
student[,1] #1열 데이터
student[c(1:3),]
student[,c(2,3,4,6)]
student[,c(2,3,4,6)] #2,3,4,6열 데이터터
student
student[,c(2,3,4,6)] #2,3,4,6열 데이터
student[c(-2,-4,-6),] #2,4,6행 외의 모든 데이터터
student[c(-2,-4,-6),] #2,4,6행 외의 모든 데이터
student[,c(-1,-5)]
student[c(1:3),c(-1,-5)] #1~3행의의 1,5열 제외 데이터
#국어점수가 90점 이상인 데이터
subset(student,subset=(student_kor>=90))
student
#국어점수가 90점 이상인 데이터
subset(student,subset=(student_kor>=90))
subset(student,student$mat>99)
subset(student,select=c(1:4))
subset(student,select=c(-1:-4)) # 1~4열 제외 모든 데이터
subset(student,select=c('name','kor','mat'))
# 수학점수가 99점 이상인 여학생만 출력
subset(studnet,subset=(student_gender='여자'& mat>=99))
# 수학점수가 99점 이상인 여학생만 출력
subset(student,subset=(student_gender='여자'& mat>=99))
# 수학점수가 99점 이상인 여학생만 출력
subset(student,subset=(student_gender=='여자'& mat>=99))
# 수학점수가 99점 이상인 여학생만 출력
subset(student,subset=(student_gender=='여'& mat>=99))
# 처음 5행만
student[c(1:5),]
head(student)
# 처음 3행만
head(student,3)
edit(student)
emp<- read.csv(file.choose()) # 탐색기에서 선택한 scv파일을 emp변수에 할당
View(emp)
emp
head(emp)
class(emp)
typeof(emp)
# 1. 직원이름만 출력하기
emp[,2]
# 1. 직원이름만 출력하기
emp[ename]
# 1. 직원이름만 출력하기
subset(emp,select='ename')
# 2. 직원이름, job, sal
subset(emp,select=c('ename','job','sal'))
# 3. 이름이 KING인 직원의 empno, job, hiredate, sal
subset(emp,select='ename==KING')
# 3. 이름이 KING인 직원의 empno, job, hiredate, sal
subset(emp,select='ename'==KING)
emp
# 3. 이름이 KING인 직원의 empno, job, hiredate, sal
subset(emp,select=c('ename'==KING)
# 3. 이름이 KING인 직원의 empno, job, hiredate, sal
subset(emp,select=c('ename'==KING))
# 3. 이름이 KING인 직원의 empno, job, hiredate, sal
subset(emp,select=c(ename=='KING'))
# 3. 이름이 KING인 직원의 empno, job, hiredate, sal
subset(emp,subset=(ename=='KING'))
# 4. sal이 2000이상인 직원의 empno,ename,sal
subset(emp,subset=(sal>=2000))
# 4. sal이 2000이상인 직원의 empno,ename,sal
subset(emp,subset=(sal>=2000),select='ename','empno','sal')
# 4. sal이 2000이상인 직원의 empno,ename,sal
subset(emp,subset=(sal>=2000))
# 4. sal이 2000이상인 직원의 empno,ename,sal
subset(emp,select = c('ename','empno','sal'),subset=(sal>=2000))
# 5. sal이 2000이상 3000이하인 직원의 ename, sal
subset(emp, subset=(sal>=2000 & sal<=3000))
# 5. sal이 2000이상 3000이하인 직원의 ename, sal
subset(emp, subset=(sal>=2000 & sal<=3000),select=c('ename','sal'))
# 1. 직원이름만 출력하기
subset(emp,select='ename',drop=F)
# 11. 타입 판별 및 타입 변환
head(emp)
tail(emp)
class(emp)
class(emp$deptno)
str(emp)
emp$deptno <-as.factor(emp$deptno)
str(emp)
class(iris)
edit(iris)
str(iris)
str(iris)
str(iris)
edit(iris)
str(iris)
iris$Species <- as.character(iris$Species)
str(iri)
str(iris)
iris$Species <- as.factor(iris$Species)
str(iris)
levels(iris)
levels(iris$Species)
# 타입판별
class(iris$Species)
is.factor(iris$Species)
str(iris$Species)
# 12. 문자열과 날짜
name <- 'eric'
length(name)
nchar(name)
names<- c('eric','jin','larray','curly')
nchar(names)
length(names)
# 하위 문자열 추출하기 : substr
?substr
substr('ABCDEF',1,4)
substr('ABCDEF',1,10)
substr('ABCDEF',4,10) # 없는 번재 문자는 ""로 처리
substr(names,1,2) # names 안에 각각의 문자 1~2번째 까지 추출
# name 안에 각각의 이름의 맨 마지막 자리의 앞 글자, 맨 마지막 글자
substr(names,nchar(names)-1,nchar(names))
# 문자열 연결하기 : paste, paste0
names<- c('eric',larray','curly')
# 문자열 연결하기 : paste, paste0
names<- c('eric','larray','curly')
paste(names,'loves','starts')
paste(names,'loves','starts',sep='_')
paste(names,'loves','starts',sep='_',collapse = ', and')
paste(names,'loves','starts',sep='_',collapse = ', and ')
paste0(names,'loves','starts')
# 문.
name<- c('yun','lim','lee')
hobby<- c('swim','sleep','eat')
paste(name,'의 취미는 ',hobby,'이고 ,')
paste(name,'의 취미는 ',hobby,collapse='이고 , ')
paste(name,sep='의 취미는 ',hobby,collapse='이고 , ')
cat(name,sep='의 취미는 ',hobby,collapse='이고 , ')
cat(name,sep='의 취미는 ',hobby,collapse='이고 , ')
cat(paste(name,sep='의 취미는 ',hobby,collapse='이고 , '))
# 문자열 분할 (구분자 분할하기)
path <- 'home/hadoop/data/speech.csv'
strsplit(path,'/')
customerInfo <- 'jin@gmail.com,010-9999-8888,seou; korea'
customers <- c('jin@gmail.com,010-9999-8888,seoul korea',
'yun@naver.com,02-304-2930,pusan korea')
strsplit((customerInfo,'010-9999-8888'))
strsplit((customerInfo,',010-9999-8888'))
strsplit(customerInfo,',010-9999-8888')
customerInfo <- 'jin@gmail.com,010-9999-8888,seoul korea'
customers <- c('jin@gmail.com,010-9999-8888,seoul korea',
'yun@naver.com,02-304-2930,pusan korea',
'lee@daum.net,011-504-5930,pusan korea')
strsplit(customers,'[0-9]{2.3}-[0-9]{3,4}-[0-9]{4}')
strsplit(customers,'[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}')
s<-'Curly is the smart one. Curly is funny, too.'
sub('Curly','Eric',s)
gsub('Curly','Eric',s)
s
gsub(' ','',s)
