// 데이터 구조_list

	1. list	- [ ]를 이용해서 만들며, 여러 ㄱ밧을 하나의 변수에 저장/관리할 수 있음
 		- 인덱스 : 각 요소의 위치. 인덱스는 0부터, 마지막 인덱스는 -1가능
		- 슬라이싱 : 부분 데이터셋을 뽑아 내는 것.
	
	2. 2차원 리스트	- 리스트 내부에 리스트를 넣는 방식.
			- 특이할 건 없고 리스트 중첩이라고 보면된다. 3차원은 많이 사용하지 않는다.
			- 원하는 데이터를 얻기위해선 슬라이싱을 2회 해줘야 한다. 
				EX) numbers_2d[0][2] - numbers_2d의 0번째 인덱스에 있는 리스트 안의 
				  2인덱스에 있는 요소값을 가져온다.
	
	3. list의 기본 정보 조회
		- list내부 요소의 개수는 len() 함수로 가져올 수 있다.
		- min(),max() 함수를 이용하여 리스트내 요소의 최소값,최대값을 가져올 수 있다.
			** 2차원 리스트의 경우 리스트 안에 속한 각 리스트의 첫번째 요소에 따라 출력된다.
	
	4. 요소 추가
		- + ; 두 리스트를 연결한다.
		- * ; 리스트를 곱한 수 만큼 반복해서 나타낸다
		- append( ) : 요소를 추가를 원하는 리스트의 맨 끝부분에 추가한다.
		- extend( ) : 리스트를 요소별로 맨 뒤에 추가 해준다.  
		- insert(idx,추가할요소) : 지정된 index에 요소를 삽입해 준다. 삽입되면 원래 있던 index는 
				자동으로 뒤로 밀린다.

	5. 인덱싱
		- count ( ) : 리스트에서 데이터의 개수 반환
			** 없는 데이터를 카운트하면 수치는 0으로 반환되어 나온다
		- index ( ) : 해당 요소의 위치를 반환
			** 없는 인덱스를 입력면 에러가 발생한다
		- [index] : 인덱스를 이용해 데이터에 접근
			** [a:b:c] : a index 부터 b인덱스 전까지 c만큼씩 증가하면서 데이터에 접근
	
	6. 람다식 - 인덱스에 접근해서 해당 데이터를 가져오는데 한층 수월하게 해주는 방법.
		추후 내용을 더 다룬다.
		- 모든 데이터 가져오기  : [data for data in list]
		- 짝수 데이터만 가져오기 : [data for data in list if x%2==0]
		

// 210222 kks