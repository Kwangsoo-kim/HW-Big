// DB연동

	1. SQLite - 디스크 기반 데이터베이스를 제공하는 C라이브러리
		- 데이터베이스의 프로토타입을 만든후 다른 데이터베이스에 이식 가능
		- 파이썬에서는 sqlite3 모듈을 불러와서 연동후 사용한다. 

	2. Oracle - cx_Oracle 패키지가 필요하다.
		- 연결객체를 만드는 과정만 다를뿐 나머지 사용법은 SQLite와 같다.
		- 연결객체 만드는 함수
			- 연결객체 = cx_Oracle.connect(userid,password,HOST:PORT/SID)
	
	3. MariaDB - pymysql 패키지가 필요하다. MySQL에도 연결가능
		  - 연결객체를 만드는 과정만 다를뿐 나머지 사용법은 SQLite와 유사하다.
		  - 연결객체를 만드는 함수
			- 연결객체 = pymysql.connect(host="",port="",db="",user="",passwd="",autocommit=True)
	
	4. 데이터베이스의 사용
		- DB연결 객체 생성시, 파일이 없으면 파일을 생성하고, 있으면 원래 있던 파일과 연동한다,
		- 연결객체 함수 : sqlite3.connect(database_file)
		- 연결객체생성후 cursor객체를 생성해야한다. cursor객체는 SQL문을 실행시키고 결과데이터를
		조회하는데 사용한다. cursor()함수 이용
		- 이후 cursor객체.execute(SQL문)으로 데이터베이스 이용가능하다.
		- cursor객체.execute(SQL문)으로 SELECT문 데이터 결과를 받는 함수로
			- fetchall() - 결과를 모두 받을때
			- fetchone() - 결과를 한 행씩 받을때
			- fetchmany(n) - 결과를 n행 받을때
		- 한번 fetch한 파일을 여러번 사용하려면 다시 불러오거나 변수에 담아써야한다.
		- cursor객체 자체에 받아오는게 아니고 cursor가 좌표를 지정하고있는 것 이다.
		- 트랜젝션을 커밋하는 함수는 commit()으로 데이터베이스와 유사하다.
		- 위와 반대되는 함수로 rollback()이 있다.
		- 데이터베이스의 사용이 끝났다면 꼭 연결객체를 close()해주어야 연결해제된다. 

	3. SQL 구문에서 파라미터 사용
		- qmark 방법 : SELECT 구문내 ("SELECT * FROM EMP WHERE NAME IN(?,?)",('홍','김'))
			- SQL구문의 매개변수를 포함해야할 값에 물음표로 표시한 후 튜플을 통해
			물음표에 전달할 값을 지정하는 방법이다. 
		- named 방법 : SELECT 구문내 ("SELECT * FROM EMP WHERE NAME IN(:name1,:name2)",{'name1':name1,'name2':name2})
			- SQL구문의 매개변수를 포함해야할 값에 콜론과 값을 받을 이름을 표시한 후
			딕셔너리를 이용해 이름에 값을 전달하는 방법

// 210303 kks